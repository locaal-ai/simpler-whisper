name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_call:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: ['windows-latest', 'macos-latest', 'ubuntu-latest']
        python-version: ['3.11', '3.12']
        platform: ['x86_64', 'win64']
        acceleration: ['cpu', 'cuda']
        exclude:
          - os: windows-latest
            platform: arm64
          - os: windows-latest
            platform: x86_64
          - os: macos-latest
            acceleration: cuda
          - os: macos-latest
            platform: win64
          - os: ubuntu-latest
            platform: win64
          - os: ubuntu-latest
            acceleration: cuda

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy cmake wheel setuptools build cibuildwheel

    - name: Build wheel
      env:
        SIMPLER_WHISPER_ACCELERATION: ${{ matrix.acceleration }}
        SIMPLER_WHISPER_PLATFORM: ${{ matrix.platform }}
        SIMPLER_WHISPER_PYTHON_VERSION: ${{ matrix.python-version }}
        CIBW_BUILD: cp${{ matrix.python-version == '3.11' && '311' || '312' }}-*
        CIBW_SKIP: "*-musllinux_*"  # Skip musllinux builds unless you need them
      run: |
        python setup.py build_ext --inplace
        python -m cibuildwheel --output-dir dist

    - name: Install built wheel Non-Windows
      if: startsWith(matrix.os, 'windows') == false
      run: |
        pip install dist/*.whl
        echo "WHEEL_FILE=$(basename $(ls dist/*.whl))" >> $GITHUB_ENV

    - name: Install built wheel Windows
      if: startsWith(matrix.os, 'windows') == true
      shell: pwsh
      run: |
        $wheelFile = Get-ChildItem dist/*.whl | Select-Object -First 1
        if (-not $wheelFile) {
          Write-Error "No wheel file found in dist directory"
          exit 1
        }
        Write-Output "Installing wheel file: $($wheelFile.FullName)"
        pip install $wheelFile.FullName
        echo "WHEEL_FILE=$($wheelFile.Name)" >> $env:GITHUB_ENV

    - name: Test import
      if: false
      run: |
        python -c "import sys; sys.path.pop(0); import simpler_whisper; print(simpler_whisper.__file__)"

    - name: Upload wheel
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.WHEEL_FILE }}
        path: dist/*.whl
